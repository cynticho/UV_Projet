export var BreakpointInfix;
(function (BreakpointInfix) {
    BreakpointInfix["xs"] = "xs";
    BreakpointInfix["sm"] = "sm";
    BreakpointInfix["md"] = "md";
    BreakpointInfix["lg"] = "lg";
    BreakpointInfix["xl"] = "xl";
    BreakpointInfix["xxl"] = "xxl";
})(BreakpointInfix || (BreakpointInfix = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZXVpLnR5cGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZXVpLWFuZ3VsYXIvc3JjL2xpYi9jb3JldWkudHlwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsTUFBTSxDQUFOLElBQVksZUFPWDtBQVBELFdBQVksZUFBZTtJQUN6Qiw0QkFBUyxDQUFBO0lBQ1QsNEJBQVMsQ0FBQTtJQUNULDRCQUFTLENBQUE7SUFDVCw0QkFBUyxDQUFBO0lBQ1QsNEJBQVMsQ0FBQTtJQUNULDhCQUFXLENBQUE7QUFDYixDQUFDLEVBUFcsZUFBZSxLQUFmLGVBQWUsUUFPMUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJc0FjdGl2ZU1hdGNoT3B0aW9ucyB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5cbmV4cG9ydCB0eXBlIE5nQ3NzQ2xhc3MgPSBzdHJpbmcgfCBzdHJpbmdbXSB8IFNldDxzdHJpbmc+IHwgeyBba2xhc3M6IHN0cmluZ106IGFueSB9O1xuXG5leHBvcnQgZW51bSBCcmVha3BvaW50SW5maXgge1xuICB4cyA9ICd4cycsXG4gIHNtID0gJ3NtJyxcbiAgbWQgPSAnbWQnLFxuICBsZyA9ICdsZycsXG4gIHhsID0gJ3hsJyxcbiAgeHhsID0gJ3h4bCdcbn1cblxuZXhwb3J0IHR5cGUgQnJlYWtwb2ludEluZml4U3RyaW5ncyA9IGtleW9mIHR5cGVvZiBCcmVha3BvaW50SW5maXg7XG5cbmV4cG9ydCB0eXBlIEJyZWFrcG9pbnRzID0gQnJlYWtwb2ludEluZml4U3RyaW5ncyB8IHN0cmluZztcblxuZXhwb3J0IHR5cGUgU2l6ZXMgPSAnc20nIHwgJ21kJyB8ICdsZycgfCAneGwnIHwgJ3h4bCcgfCBzdHJpbmc7XG5cbmV4cG9ydCB0eXBlIENvbG9ycyA9XG4gIHwgJ3ByaW1hcnknXG4gIHwgJ3NlY29uZGFyeSdcbiAgfCAnc3VjY2VzcydcbiAgfCAnZGFuZ2VyJ1xuICB8ICd3YXJuaW5nJ1xuICB8ICdpbmZvJ1xuICB8ICdkYXJrJ1xuICB8ICdsaWdodCdcbiAgfCAncHJpbWFyeS1ncmFkaWVudCdcbiAgfCAnc2Vjb25kYXJ5LWdyYWRpZW50J1xuICB8ICdzdWNjZXNzLWdyYWRpZW50J1xuICB8ICdkYW5nZXItZ3JhZGllbnQnXG4gIHwgJ3dhcm5pbmctZ3JhZGllbnQnXG4gIHwgJ2luZm8tZ3JhZGllbnQnXG4gIHwgJ2RhcmstZ3JhZGllbnQnXG4gIHwgJ2xpZ2h0LWdyYWRpZW50J1xuICB8IHN0cmluZztcblxuLy8gZXhwb3J0IHR5cGUgQ29sb3JzR3JhZGllbnQgPVxuLy8gICB8IENvbG9yc1xuLy8gICB8IGAke0NvbG9yc30tZ3JhZGllbnRgO1xuXG5leHBvcnQgdHlwZSBCYWNrZ3JvdW5kQ29sb3JzID0gQ29sb3JzIHwgJ2JvZHknIHwgJ3doaXRlJyB8ICd0cmFuc3BhcmVudCc7XG5cbmV4cG9ydCB0eXBlIERpcmVjdGlvbnMgPSAnZG93bicgfCAndXAnIHwgJ3N0YXJ0JyB8ICdlbmQnIHwgJyc7XG5cbmV4cG9ydCB0eXBlIFRleHRDb2xvcnMgPVxuICB8IENvbG9yc1xuICB8ICdwcmltYXJ5LWVtcGhhc2lzJ1xuICB8ICdzZWNvbmRhcnktZW1waGFzaXMnXG4gIHwgJ3N1Y2Nlc3MtZW1waGFzaXMnXG4gIHwgJ2Rhbmdlci1lbXBoYXNpcydcbiAgfCAnd2FybmluZy1lbXBoYXNpcydcbiAgfCAnaW5mby1lbXBoYXNpcydcbiAgfCAnbGlnaHQtZW1waGFzaXMnXG4gIHwgJ2JvZHknXG4gIHwgJ2JvZHktZW1waGFzaXMnXG4gIHwgJ2JvZHktc2Vjb25kYXJ5J1xuICB8ICdib2R5LXRlcnRpYXJ5J1xuICB8ICdibGFjaydcbiAgfCAnYmxhY2stNTAnXG4gIHwgJ3doaXRlJ1xuICB8ICd3aGl0ZS01MCdcbiAgfCBzdHJpbmc7XG5cbmV4cG9ydCB0eXBlIEFsaWdubWVudCA9XG4gIHwgJ2Jhc2VsaW5lJ1xuICB8ICd0b3AnXG4gIHwgJ21pZGRsZSdcbiAgfCAnYm90dG9tJ1xuICB8ICd0ZXh0LXRvcCdcbiAgfCAndGV4dC1ib3R0b20nO1xuXG5leHBvcnQgdHlwZSBCYWRnZVBvc2l0aW9ucyA9XG4gIHwgJ3RvcC1zdGFydCdcbiAgfCAndG9wLWVuZCdcbiAgfCAnYm90dG9tLWVuZCdcbiAgfCAnYm90dG9tLXN0YXJ0J1xuICB8IHN0cmluZ1xuICB8IHVuZGVmaW5lZDtcblxuZXhwb3J0IHR5cGUgUGxhY2VtZW50cyA9XG4gIHwgJ2F1dG8nXG4gIHwgJ2F1dG8tc3RhcnQnXG4gIHwgJ2F1dG8tZW5kJ1xuICB8ICd0b3AtZW5kJ1xuICB8ICd0b3AnXG4gIHwgJ3RvcC1zdGFydCdcbiAgfCAnYm90dG9tLWVuZCdcbiAgfCAnYm90dG9tJ1xuICB8ICdib3R0b20tc3RhcnQnXG4gIHwgJ3JpZ2h0LXN0YXJ0J1xuICB8ICdyaWdodCdcbiAgfCAncmlnaHQtZW5kJ1xuICB8ICdsZWZ0LXN0YXJ0J1xuICB8ICdsZWZ0J1xuICB8ICdsZWZ0LWVuZCdcbiAgfCB1bmRlZmluZWQ7XG5cbmV4cG9ydCB0eXBlIFNoYXBlcyA9XG4gIHwgJ3JvdW5kZWQnXG4gIHwgJ3JvdW5kZWQtdG9wJ1xuICB8ICdyb3VuZGVkLWVuZCdcbiAgfCAncm91bmRlZC1ib3R0b20nXG4gIHwgJ3JvdW5kZWQtc3RhcnQnXG4gIHwgJ3JvdW5kZWQtY2lyY2xlJ1xuICB8ICdyb3VuZGVkLXBpbGwnXG4gIHwgJ3JvdW5kZWQtMCdcbiAgfCAncm91bmRlZC0xJ1xuICB8ICdyb3VuZGVkLTInXG4gIHwgJ3JvdW5kZWQtMydcbiAgfCBzdHJpbmc7XG5cbmV4cG9ydCB0eXBlIFRyaWdnZXJzID0gJ2hvdmVyJyB8ICdmb2N1cycgfCAnY2xpY2snO1xuXG5leHBvcnQgdHlwZSBQb3NpdGlvbnMgPSAnZml4ZWQnIHwgJ3N0aWNreSc7XG5cbmV4cG9ydCB0eXBlIElucHV0VHlwZSA9XG4gIHwgJ2J1dHRvbidcbiAgfCAnY29sb3InXG4gIHwgJ2RhdGUnXG4gIHwgJ2RhdGV0aW1lJ1xuICB8ICdkYXRldGltZS1sb2NhbCdcbiAgfCAnZW1haWwnXG4gIHwgJ2ZpbGUnXG4gIHwgJ2hpZGRlbidcbiAgfCAnaW1hZ2UnXG4gIHwgJ21vbnRoJ1xuICB8ICdudW1iZXInXG4gIHwgJ3Bhc3N3b3JkJ1xuICB8ICdyYW5nZSdcbiAgfCAncmVzZXQnXG4gIHwgJ3NlYXJjaCdcbiAgfCAnc3VibWl0J1xuICB8ICd0ZWwnXG4gIHwgJ3RleHQnXG4gIHwgJ3RpbWUnXG4gIHwgJ3VybCdcbiAgfCAnd2VlaydcbiAgfCAnY2hlY2tib3gnXG4gIHwgJ3JhZGlvJztcblxuZXhwb3J0IGludGVyZmFjZSBJTmF2TGlua1Byb3BzIHtcbiAgcXVlcnlQYXJhbXM/OiB7IFtrOiBzdHJpbmddOiBhbnkgfTtcbiAgZnJhZ21lbnQ/OiBzdHJpbmc7XG4gIHF1ZXJ5UGFyYW1zSGFuZGxpbmc/OiAnbWVyZ2UnIHwgJ3ByZXNlcnZlJyB8ICcnIHwgbnVsbDtcbiAgcHJlc2VydmVGcmFnbWVudD86IGJvb2xlYW47XG4gIHNraXBMb2NhdGlvbkNoYW5nZT86IGJvb2xlYW47XG4gIHJlcGxhY2VVcmw/OiBib29sZWFuO1xuICBzdGF0ZT86IHsgW2s6IHN0cmluZ106IGFueSB9O1xuICByb3V0ZXJMaW5rQWN0aXZlT3B0aW9ucz86IHsgZXhhY3Q6IGJvb2xlYW4gfSB8IElzQWN0aXZlTWF0Y2hPcHRpb25zO1xuICByb3V0ZXJMaW5rQWN0aXZlPzogc3RyaW5nIHwgc3RyaW5nW107XG4gIGFyaWFDdXJyZW50V2hlbkFjdGl2ZT86ICdwYWdlJyB8ICdzdGVwJyB8ICdsb2NhdGlvbicgfCAnZGF0ZScgfCAndGltZScgfCB0cnVlIHwgZmFsc2U7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU5hdkF0dHJpYnV0ZXMge1xuICBbcHJvcE5hbWU6IHN0cmluZ106IGFueTtcbn1cblxuZXhwb3J0IHR5cGUgQnV0dG9uVHlwZSA9ICdidXR0b24nIHwgJ3N1Ym1pdCcgfCAncmVzZXQnO1xuIl19